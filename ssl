Skip to content
 Enterprise
Search or jump toâ€¦

Pull requests
Issues
Explore
 
@SRAMINE1 
1
00AEM-Engineering/aem-ssl-ihs
 Code Issues 1 Pull requests 1 Projects 0 Wiki Insights Settings
aem-ssl-ihs/habitat/hooks/run
@SRAMINE1 SRAMINE1 Update run
be4c4c2 9 days ago
@AYELETI@SRAMINE1@JSTASKO2
290 lines (261 sloc)  12.1 KB
  
#!/bin/bash

    exec 2>&1

    source "{{pkg.svc_config_path}}/helpers.sh"

    function CERT_BKUP_RESTORE()
    {
        FLAG=$1
        CP_KDB_STATUS=0;CP_CERT_STATUS=0;CP_CSR_STATUS=0;CP_JSON_STATUS=0;CP_RDB_STATUS=0;CP_CRL_STATUS=0;CP_STH_STATUS=0

        RDB="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}.rdb"
        CRL="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}.crl"
        STH="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}.sth"

	echo "${KDB} ,${CERT} ,${CSR} , ${RDB} ,${CRL} ,${STH} ,${HOST_REQUEST_JSON} , ${USER_CONFIG_DIR} "

                USER_CONFIG_BR_DIR="${USER_CONFIG_DIR}/backup_restore"
                echo "Creating a temporary certificate backup directory"
                if [[ "$FLAG" == "B" ]]
                then
                echo "Initiating Cert,CSR backup"
                    if [[ ! -d "${USER_CONFIG_BR_DIR}" ]]; then
                                        mkdir -p "${USER_CONFIG_BR_DIR}" || MKDIR_STATUS="$?"
                                                        if [[ "${MKDIR_STATUS}" != 0 ]]
                                                        then
                                                                local USER_CONFIG_DIR
                                                                USER_CONFIG_BR_DIR="${USER_CONFIG_DIR}"
                                                        fi
                    fi
        		echo "Config backrestore directory is - ${USER_CONFIG_BR_DIR} "
                    if [[ -f "${KDB}" ]];then
                            cp -pf "${KDB}" "${USER_CONFIG_BR_DIR}" || CP_KDB_STATUS=1
                        else
                                echo "KDB file is not present"
                    fi
                    if [[ -f "${CERT}" ]];then
                           cp -pf "${CERT}" "${USER_CONFIG_BR_DIR}" || CP_CERT_STATUS=1
                        else
                                echo "CERT file is not present"
                        fi
                    if [[ -f "${CSR}" ]];then
                            cp -pf "${CSR}" "${USER_CONFIG_BR_DIR}" || CP_CSR_STATUS=1
                        else
                                echo "CSR file is not present"
                         fi
		    if [[ -f "${RDB}" ]];then
                            cp -pf "${RDB}" "${USER_CONFIG_BR_DIR}" || CP_RDB_STATUS=1
                        else
                                echo "RDB file is not present"
                        fi
                    if [[ -f "${STH}" ]];then
                           cp -pf "${STH}" "${USER_CONFIG_BR_DIR}" || CP_STH_STATUS=1
                        else
                                echo "STH file is not present"
                        fi
                    if [[ -f "${CRL}" ]];then
                            cp -pf "${CRL}" "${USER_CONFIG_BR_DIR}" || CP_CRL_STATUS=1
                        else
                                echo "CRL file is not present"
                        fi
                     
                    if [[ -f "${HOST_REQUEST_JSON}" ]];then
                           cp -pf "${HOST_REQUEST_JSON}" "${USER_CONFIG_BR_DIR}" || CP_JSON_STATUS=1
                        else
                                echo "JSON file is not present"
                             fi
                     echo ""${CP_KDB_STATUS}" != 0 -o "${CP_CSR_STATUS}" != 0 -o "${CP_CERT_STATUS}" != 0 -o "${CP_JSON_STATUS}" != 0 -o "${CP_RDB_STATUS}" != 0 -o "${CP_CRL_STATUS}" != 0 -o "${CP_STH_STATUS}" != 0 "
                        if [ "${CP_KDB_STATUS}" != 0 -o "${CP_CSR_STATUS}" != 0 -o "${CP_CERT_STATUS}" != 0 -o "${CP_JSON_STATUS}" != 0 -o "${CP_RDB_STATUS}" != 0 -o "${CP_CRL_STATUS}" != 0 -o "${CP_STH_STATUS}" != 0 ]
                        then
                                echo "Backup is partially complete"
                        else
                                echo "Backup is complete"
                        fi

			
	    elif [[ "$FLAG" == "R" ]]
		then
		    if [[ ! -d "${USER_CONFIG_BR_DIR}" ]]
			then
				USER_CONFIG_BR_DIR="${USER_CONFIG_DIR}"
				if [[ ! -d "${USER_CONFIG_BR_DIR}" ]]
				then
                    			echo "There is no backup directory present,hence restore is not performed..."
				fi
	  	    else
			    echo "Copying the files back to the original location"
                                         CB_KDB_STATUS=0;CB_CSR_STATUS=0;CB_CERT_STATUS=0;CB_RDB_STATUS=0;CB_CRL_STATUS=0;CB_STH_STATUS=0;CB_JSON_STATUS=0
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.kdb" ]];then
    						cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.kdb" "${KDB}" || CB_KDB_STATUS=1
					else
						echo "KDB file is not present"
					fi
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.csr" ]];then
					   cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.csr" "${CSR}" || CB_CSR_STATUS=1
					else
						echo "CSR file is not present"
					fi
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.cer" ]];then
						cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.cer" "${CERT}" || CB_CERT_STATUS=1
					else
						echo "CERT file is not present"
					fi
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.rdb" ]];then
						cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.kdb" "${RDB}" || CB_RDB_STATUS=1
					else
						echo "RDB file is not present"
					fi
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.crl" ]];then
					   cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.crl" "${CRL}" || CB_CRL_STATUS=1
					else
						echo "CRL file is not present"
					fi
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.sth" ]];then
						cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}.sth" "${STH}" || CB_STH_STATUS=1
					else
						echo "STH file is not present"
					fi						
					if [[ -f "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}_REQ.json" ]];then
					   cp -pf "${USER_CONFIG_BR_DIR}/${SERVICE_HOSTNAME}_REQ.json" "${CERT}" || CB_JSON_STATUS=1
					else
						echo "JSON file is not present"
					fi
					echo "${CB_KDB_STATUS}" != 0 -o "${CB_CSR_STATUS}" != 0 -o "${CB_CERT_STATUS}" != 0 -o "${CB_JSON_STATUS}" != 0 -o "${CB_RDB_STATUS}" != 0 -o "${CB_CRL_STATUS}" != 0 -o "${CB_STH_STATUS}" != 0""				
					if [ "${CB_KDB_STATUS}" != 0 -o "${CB_CSR_STATUS}" != 0 -o "${CB_CERT_STATUS}" != 0 -o "${CB_JSON_STATUS}" != 0 -o "${CB_RDB_STATUS}" != 0 -o "${CB_CRL_STATUS}" != 0 -o "${CB_STH_STATUS}" != 0 ]
					then
						echo "Restore is partially complete"
					else
						echo "Restore is complete"
					fi
			fi
		else
		    echo "Invalid Flag is passed for backup/restore"
		fi
		
	}
	  

    function START_CERT_WORKFLOW()
    {
        echo "Starting the Cert Workflow"
        if [[ "${MODIFY_SSL}" == "yes" ]]
        then
            CSR_DELETE || echo -e "Removing ${CSR} experienced an issue"
            CERT_DELETE || echo -e "Removing ${CERT} experienced an issue"
            CA_DELETE "${ROOT_CERT}" "root" || echo -e "Removing ${ROOT_CERT} from ${KDB} experienced an issue"
            CA_DELETE "${INT_CERT}" "int" || echo -e "Removing ${INT_CERT} from ${KDB} experienced an issue"
            CERTKDB_DELETE || echo -e "Removing ${CERT}  from ${KDB} experienced an issue"

        fi

        KDB_CHECK || return $?
        echo "KDB CHECK status is $?"
        JWT_TOKEN="$(GET_TOKEN)"
        KDB_CREATE || return $?
        echo "KDB CREATE status is $?"
        CSR_CREATE || return $?
        echo "CSR CREATE status is $?"
        CREATE_JSON_REQ || return $?
        echo "JSON REQ status is $?"
        REQNUM="$(GET_REQUEST_NUM)"
        case "${REQNUM}" in
        "0" ) 
            echo "New cert - Request number returned ${REQNUM}"
            GET_CERT || return $?
            ;;
        * )
            echo -e "Cert exists and the request number is ${REQNUM}"
            GET_CERT "${REQNUM}" || return $?
            ;;
        esac

        CA_UPLOAD "${ROOT_CERT}" "root" || return $?
        echo "CA UPLOAD ROOT status is $?"
        CA_UPLOAD "${INT_CERT}" "int" || return $?
        echo "CA UPLOAD iNT status is $?"
        CERT_UPLOAD "${CERT}" || return $?
        echo "CERT UPLOAD status is $?"
    }

    while true
    do
        LD_LIBRARY_PATH="${IHS_HOME}/lib:${IHS_HOME}/modules:${IHS_HOME}/gsk8/lib64:${LD_LIBRARY_PATH}"
        export LD_LIBRARY_PATH
        __GSKIT="${IHS_HOME}/gsk8/bin/gsk8capicmd_64"
        USER_CONFIG_DIR="/hab/user/{{svc.service}}/config"
        SERVERS_DOWN=0
        CERT_INSTALLED=""
        MODIFY_SSL="{{cfg.revision.modify}}" 
        CERTMAN_CFG_REQ='{{toJson cfg.certreq}}'
        TOML_HOST_CFG='{{toToml cfg.host}}'
        TOML_CERTMAN_CFG='{{toToml cfg.certman}}'
        TOML_CERTREQ_CFG='{{toToml cfg.certreq}}'
        TOML_VAULT='{{toToml cfg.vault.config}}'
        ROOT_CERT="{{pkg.svc_config_path}}/root.pem"
        INT_CERT="{{pkg.svc_config_path}}/int.pem"
        CERTMAN_URI="{{cfg.certman.uri}}"
        SERVICE_HOSTIP="{{sys.ip}}"
        SERVICE_HOSTNAME="$(hostname -s)"
        SERVICE_FQDN="$(hostname -f)"
        SERVICE_URL="http://${SERVICE_FQDN}:${SERVICE_PORT}"
        SERVICE_SSL_URL="https://${SERVICE_FQDN}:${SERVICE_SSL_PORT}"
        SERVICE_PKG_NAME="{{pkg.name}}"
        # IHS_KEY_PWD="{{cfg.creds.kpasswd}}" ## Leaving as a placeholder for future use
        SSL_SVC_DATA_PATH="{{pkg.svc_data_path}}"
        KDB="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}.kdb"
        CSR="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}.csr"
        CERT="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}.cer"
        HOST_REQUEST_JSON="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}_REQ.json"
        # IHS_HOST_REQNUM_JSON="${SSL_SVC_DATA_PATH}/${SERVICE_HOSTNAME}_REQNUM.json" ## May use may not
        DNAME="cn=${SERVICE_FQDN}, ou=ITO Support, o=Ford Motor Company, L=Dearborn, ST=Michigan, C=US"
        
        VLT_CODE=""

        if [ "{{cfg.vault.config.vltrqd}}" == "yes" ];
        then 
            VLT_FETCH || VLT_CODE="$?"

            if [[ "${VLT_CODE}" == 126 || "${VLT_CODE}" == 1 ]]
            then
                    
                echo "Vault return code is $VLT_CODE"
                echo "Vault Interaction failed"
                sleep 15
                exit;
            else   
                echo "Vault Interaction Successful";
            fi
        else 
            __default
        fi
      
        CMAPICRED

        SSL_CREATE="
    #=============================================================================
    #Creating SSL certificates for ${SERVICE_HOSTNAME}
    #=============================================================================
    "
        SSL_CONFIGURED="
    #=============================================================================
    #SSL Configured on ${SERVICE_HOSTNAME}
    #=============================================================================
    "
        SSL_SVC_DATA_PATH_DNE="
    #=============================================================================
    #${SSL_SVC_DATA_PATH} does not exist, exiting something went wrong in setup.
    #=============================================================================
    "
        
        WORKFLOW_CODE=""
        CERTMANCHECK=$(__curl -s -X POST --header 'CONTENT-TYPE: application/json' --data "${CERTMAN_CREDS}" "${CERTMAN_URI}/OAuth/jwttoken" | jq -r '.status' )
        if [ "$CERTMANCHECK" == "Success" ];
        then 
            echo "Certman Credentials are good. Proceeding further"
            CERT_BKUP_RESTORE "B"
            START_CERT_WORKFLOW || WORKFLOW_CODE="$?"
            #echo "WORKFLOW CODE IS $WORKFLOW_CODE"
            if [[ "${WORKFLOW_CODE}" == 128 || "${WORKFLOW_CODE}" == 1 ]]
            then
                if [ CERT_INSTALLED="yes" ]
                then
                    echo -e "${SSL_CONFIGURED}"
                else  
                    echo -e "Restarting workflow exited with code ${WORKFLOW_CODE}"
	             CERT_BKUP_RESTORE "R"
                    break
                fi
            else
                echo -e "${SSL_CONFIGURED}"
                
                echo -e ""
                if [[ "{{cfg.revision.modify}}" == "yes" ]]
                then
                    RESET_MODIFY_CONFIG
                fi
            fi
        else 
            echo "Certman Credentials are invalid.Therefore, exiting"
            echo "Make sure the Certman credential is upto date in Vault";
			
            break;
        fi

        sleep 12000

    done

    sleep 1200
Â© 2020 GitHub, Inc.
Help
Support
API
Training
Blog
About
GitHub Enterprise Server 2.19.5
